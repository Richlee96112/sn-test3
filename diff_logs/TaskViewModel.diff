diff --git a/ViewModels/TaskViewModel.swift b/ViewModels/TaskViewModel.swift
--- a/ViewModels/TaskViewModel.swift
+++ b/ViewModels/TaskViewModel.swift
--- /Users/gitaeklee/Desktop/study/Snailer-Test2/Snailer-todo/diff_logs/TaskViewModel.original	2025-08-07 20:01:45
+++ /Users/gitaeklee/Desktop/study/Snailer-Test2/Snailer-todo/diff_logs/TaskViewModel.updated	2025-08-07 20:01:45
@@ -1,6 +1,51 @@
 import Foundation
 
 class TaskViewModel: ObservableObject {
+  @Published var tasks: [Task] = []
+  @Published var newTaskTitle: String = ""
+
+  private let tasksKey = "tasks"
+
+  init() {
+    loadTasks()
+  }
+
+  func addTask() {
+    guard !newTaskTitle.isEmpty else { return }
+    let task = Task(title: newTaskTitle)
+    tasks.append(task)
+    newTaskTitle = ""
+    saveTasks()
+  }
+
+  func toggleTask(_ task: Task) {
+    if let index = tasks.firstIndex(where: { $0.id == task.id }) {
+      tasks[index].isCompleted.toggle()
+      saveTasks()
+    }
+  }
+
+  func deleteTask(_ task: Task) {
+    tasks.removeAll { $0.id == task.id }
+    saveTasks()
+  }
+
+  private func saveTasks() {
+    if let encoded = try? JSONEncoder().encode(tasks) {
+      UserDefaults.standard.set(encoded, forKey: tasksKey)
+    }
+  }
+
+  private func loadTasks() {
+    if let data = UserDefaults.standard.data(forKey: tasksKey),
+      let decoded = try? JSONDecoder().decode([Task].self, from: data)
+    {
+      tasks = decoded
+    }
+  }
+}
+
+class TaskViewModel: ObservableObject {
   @Published private(set) var tasks: [Task] = []
   private let userDefaultsManager = UserDefaultsManager()
 
